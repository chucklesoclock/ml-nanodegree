import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator


class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)  # Set the agent in the environment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning  # Whether the agent is expected to learn
        self.Q = dict()  # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon  # Random exploration factor
        self.alpha = alpha  # Learning factor

        # Set any additional class parameters as needed
        self.trial = 0
        self.desired_training_trials = 300

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        if testing:
            self.epsilon = self.alpha = 0
        else:
            # Update epsilon using a decay function of your choice
            ##### ALL RANDOM #####
            # self.epsilon = 1 if self.trial < self.desired_training_trials else 0

            ###### LOGISTIC ######
            self.epsilon = 1/(1+math.e**(-25*(-self.trial/float(self.desired_training_trials)+.5)))

            # Update additional class parameters as needed
            self.trial += 1

            # Linear
            # self.epsilon -= 1./self.desired_training_trials

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint()  # The next waypoint
        inputs = self.env.sense(self)  # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ###########
        ###########

        # NOTE: you are not allowed to engineer features outside of the inputs available.
        # Because the aim of this project is to teach Reinforcement Learning, we have placed
        #   constraints in order for you to learn how to adjust epsilon and alpha,
        #   and thus learn about the balance between exploration and exploitation.
        # With the hand-engineered features, this learning process gets entirely negated.

        state = tuple([waypoint] + [inputs[x] for x in inputs])

        return state

    def get_maxQ_action(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in.
            :returns the action of the maximum Q-value"""

        # maxQ = max(self.Q[state].keys(), key=lambda action: self.Q[action])
        maxQ = max(self.Q[state].values())
        tops = [action for action in self.Q[state] if self.Q[state][action] == maxQ]
        return random.choice(tops)

    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        if self.learning and state not in self.Q:
            self.Q[state] = {action: 0.0 for action in self.valid_actions}

    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        # not learning means totally random action
        if not self.learning:
            action = random.choice(self.valid_actions)
        else:
            if random.random() < self.epsilon:
                action = random.choice(self.valid_actions)
            else:
                action = self.get_maxQ_action(state)

        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards
            when conducting learning. """

        # When learning, implement the value iteration update rule
        if self.learning:
            # Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
            self.Q[state][action] = (1-self.alpha)*self.Q[state][action] + self.alpha*reward

        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()  # Get current state
        self.createQ(state)  # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action)  # Receive a reward
        self.learn(state, action, reward)  # Q-learn

        return


def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    from config import command_line_parse
    flags = command_line_parse()

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(**flags['env'])

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, **flags['agent'])

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, **flags['deadline'])

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, **flags['sim'])

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(**flags['run'])


smartcab_sim_run_funcs = (Environment.__init__,
                          LearningAgent.__init__,
                          Environment.set_primary_agent,
                          Simulator.__init__,
                          Simulator.run)


if __name__ == '__main__':
    run()
